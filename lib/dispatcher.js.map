{"version":3,"sources":["../src/dispatcher.js"],"names":[],"mappings":";;;;;;;;;;;;;;sBAAmB,QAAQ;;IAAf,CAAC;;uBACK,SAAS;;;;sBACR,UAAU;;;;IAEvB,UAAU;AACH,WADP,UAAU,GACA;0BADV,UAAU;;AAEZ,QAAI,CAAC,GAAG,GAAG,IAAI,qBAAM,GAAG,EAAE,CAAC;AAC3B,QAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,QAAI,CAAC,WAAW,GAAG,KAAK,CAAC;GAC1B;;eALG,UAAU;;WAOE,4BAAG;AACjB,UAAM,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC;AAChC,UAAI,CAAC,WAAW,GAAG,EAAE,CAAC;AACtB,OAAC,CAAC,IAAI,CAAC,MAAM,EAAE,UAAA,KAAK,EAAI;AACtB,aAAK,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;OAClC,CAAC,CAAC;KACJ;;;WAEW,wBAAG;AACb,UAAI,CAAC,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE;AAC5B,4BAAO,gBAAgB,EAAE,CAAC;AAC1B,eAAO;OACR;AACD,UAAI,IAAI,GAAG,KAAK,CAAC;AACjB,aAAO,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;AAClC,4BAAO,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;AAC9C,YAAI,CAAC,gBAAgB,EAAE,CAAC;AACxB,YAAI,GAAG,IAAI,CAAC;OACb;KACF;;;WAEO,kBAAC,IAAI,EAAE,OAAO,EAAE;;;AACtB,UAAI,IAAI,CAAC,WAAW,EAAE;AACpB,eAAO,OAAO,CAAC,MAAM,CAAC,qDAAqD,CAAC,CAAC;OAC9E;AACD,aAAO,IAAI,OAAO,CAAC,UAAA,OAAO,EAAI;AAC5B,cAAK,WAAW,GAAG,IAAI,CAAC;AACxB,4BAAO,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;AACjC,YAAI;AACF,gBAAK,GAAG,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAC,CAAC,CAAC;AAC9C,gBAAK,YAAY,EAAE,CAAC;AACpB,iBAAO,EAAE,CAAC;SACX,SAAS;AACR,8BAAO,aAAa,EAAE,CAAC;AACvB,gBAAK,WAAW,GAAG,KAAK,CAAC;SAC1B;OACF,CAAC,CAAC;KACJ;;;WAEI,eAAC,IAAI,EAAE;AACV,aAAO,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,UAAA,GAAG;eAAI,GAAG,CAAC,IAAI,KAAK,IAAI;OAAA,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;KAClE;;;WAEe,0BAAC,KAAK,EAAE;AACtB,UAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE;AACxC,YAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;OAC9B;KACF;;;SAtDG,UAAU;;;qBAyDD,IAAI,UAAU,EAAE","file":"dispatcher.js","sourcesContent":["import * as _ from 'lodash';\nimport Bacon from 'baconjs';\nimport Logger from './logger';\n\nclass Dispatcher {\n  constructor() {\n    this.bus = new Bacon.Bus();\n    this.dirtyStores = [];\n    this.dispatching = false;\n  }\n\n  _pushChangesOnce() {\n    const stores = this.dirtyStores;\n    this.dirtyStores = [];\n    _.each(stores, store => {\n      store.changes.push(store.output);\n    });\n  }\n\n  _pushChanges() {\n    if (!this.dirtyStores.length) {\n      Logger.logNoDirtyStores();\n      return;\n    }\n    let also = false;\n    while (this.dirtyStores.length > 0) {\n      Logger.logDirtyStores(this.dirtyStores, also);\n      this._pushChangesOnce();\n      also = true;\n    }\n  }\n\n  dispatch(type, payload) {\n    if (this.dispatching) {\n      return Promise.reject('Cascading dispatches are prohibited. Fix your flux.');\n    }\n    return new Promise(resolve => {\n      this.dispatching = true;\n      Logger.logMessage(type, payload);\n      try {\n        this.bus.push({type: type, payload: payload});\n        this._pushChanges();\n        resolve();\n      } finally {\n        Logger.logMessageEnd();\n        this.dispatching = false;\n      }\n    });\n  }\n\n  input(type) {\n    return this.bus.filter(msg => msg.type === type).map('.payload');\n  }\n\n  markStoreAsDirty(store) {\n    if (!_.contains(this.dirtyStores, store)) {\n      this.dirtyStores.push(store);\n    }\n  }\n}\n\nexport default new Dispatcher();\n"]}